{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "baseResourceName": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "The base name to use for the resources that will be provisioned."
      }
    },
    "botClientId": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36,
      "metadata": {
        "description": "The client ID of the bot Azure AD app, e.g., 123e4567-e89b-12d3-a456-426655440000."
      }
    },
    "botClientSecret": {
      "type": "securestring",
      "minLength": 1,
      "metadata": {
        "description": "The client secret of the bot Azure AD app."
      }
    },
    "configAppClientId": {
      "type": "string",
      "minLength": 36,
      "maxLength": 36,
      "metadata": {
        "description": "The client ID of the of the configuration Azure AD app, e.g., 123e4567-e89b-12d3-a456-426655440000."
      }
    },
    "configAdminUPNList": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Semicolon-delimited list of the user principal names (UPNs) allowed to access the configuration app."
      }
    },
    "appDisplayName": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "FAQ Plus",
      "metadata": {
        "description": "The app (and bot) display name."
      }
    },
    "appDescription": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "A friendly FAQ bot that answers questions and connects you to experts.",
      "metadata": {
        "description": "The app (and bot) description."
      }
    },
    "appIconUrl": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "https://raw.githubusercontent.com/OfficeDev/microsoft-teams-apps-faqplus/master/Manifest/color.png",
      "metadata": {
        "description": "The link to the icon for the app. It must resolve to a PNG file."
      }
    },
    "tenantId": {
      "type": "string",
      "defaultValue": "[subscription().tenantId]",
      "minLength": 1,
      "maxLength": 36,
      "metadata": {
        "description": "The ID of the tenant to which the app will be deployed."
      }
    },
    "sku": {
      "type": "string",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ],
      "defaultValue": "Standard",
      "metadata": {
        "description": "The pricing tier for the hosting plan."
      }
    },
    "planSize": {
      "type": "string",
      "allowedValues": [
        "1",
        "2",
        "3"
      ],
      "defaultValue": "2",
      "metadata": {
        "description": "The size of the hosting plan (small, medium, or large)."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "qnaMakerSku": {
      "type": "string",
      "allowedValues": [
        "F0 (3 managed documents per month, 3 transactions per second, 100 transactions per minute, 50K transactions per month)",
        "S0 ($10 per month for unlimited documents, 3 transactions per second, 100 transactions per minute)"
      ],
      "defaultValue": "S0 ($10 per month for unlimited documents, 3 transactions per second, 100 transactions per minute)",
      "metadata": {
        "description": "The pricing tier for the QnAMaker service."
      }
    },
    "searchServiceSku": {
      "type": "string",
      "allowedValues": [
        "F (3 indexes)",
        "B (15 indexes)",
        "S (50 indexes)",
        "S2 (200 indexes)"
      ],
      "defaultValue": "B (15 indexes)",
      "metadata": {
        "description": "The pricing tier for the Azure Search service."
      }
    },
    "gitRepoUrl": {
      "type": "string",
      "metadata": {
        "description": "The URL to the GitHub repository to deploy."
      },
      "defaultValue": "https://github.com/OfficeDev/microsoft-teams-apps-faqplus.git"
    },
    "gitBranch": {
      "type": "string",
      "metadata": {
        "description": "The branch of the GitHub repository to deploy."
      },
      "defaultValue": "master"
    }
  },
  "variables": {
    "botName": "[parameters('baseResourceName')]",
    "botAppName": "[parameters('baseResourceName')]",
    "botAppDomain": "[concat(variables('botAppName'), '.azurewebsites.net')]",
    "botAppUrl": "[concat('https://', variables('botAppDomain'))]",
    "hostingPlanName": "[parameters('baseResourceName')]",
    "storageAccountName": "[uniquestring(concat(resourceGroup().id, parameters('baseResourceName')))]",
    "botAppInsightsName": "[parameters('baseResourceName')]",
    "functionAppName": "[concat(parameters('baseResourceName'), '-function')]",
    "configAppName": "[concat(parameters('baseResourceName'), '-config')]",
    "configAppUrl": "[concat('https://', variables('configAppName'), '.azurewebsites.net')]",
    "qnaMakerAccountName": "[parameters('baseResourceName')]",
    "qnaMakerLocation": "westus",
    "qnaMakerAppServiceName": "[concat(parameters('baseResourceName'), '-qnamaker')]",
    "qnaMakerAppInsightsName": "[concat(parameters('baseResourceName'), '-qnamaker')]",
    "qnaMakerSkuValue": "[substring(parameters('qnaMakerSku'), 0, 2)]",
    "azureSearchName": "[concat(uniquestring(concat(resourceGroup().id, parameters('baseResourceName'))), '-search')]",
    "azureSearchSkus": {
      "F ": "free",
      "B ": "basic",
      "S ": "standard",
      "S2": "standard2"
    },
    "azureSearchSkuValue": "[variables('azureSearchSkus')[toUpper(substring(parameters('searchServiceSku'), 0, 2))]]",
    "sharedSkus": [
      "Free",
      "Shared"
    ],
    "isSharedPlan": "[contains(variables('sharedSkus'), parameters('sku'))]",
    "skuFamily": "[if(equals(parameters('sku'), 'Shared'), 'D', take(parameters('sku'), 1))]",
    "keyVaultName": "[concat(parameters('baseResourceName'), '-kv')]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2018-02-01",
      "location": "[parameters('location')]",
      "kind": "Storage",
      "sku": {
        "name": "Standard_LRS"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2016-09-01",
      "name": "[variables('hostingPlanName')]",
      "location": "[parameters('location')]",
      "properties": {
        "name": "[variables('hostingPlanName')]",
        "hostingEnvironment": "",
        "numberOfWorkers": 1
      },
      "sku": {
        "name": "[if(variables('isSharedPlan'), concat(variables('skuFamily'),'1'), concat(variables('skuFamily'),parameters('planSize')))]",
        "tier": "[parameters('sku')]",
        "size": "[concat(variables('skuFamily'), parameters('planSize'))]",
        "family": "[variables('skuFamily')]",
        "capacity": 0
      }
    },
    {
      "apiVersion": "2018-11-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('botAppName')]",
      "location": "[parameters('location')]",
      "kind": "app",
      "identity": {
          "type": "SystemAssigned"
      },
      "properties": {
        "name": "[variables('botAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "enabled": true,
        "reserved": false,
        "clientAffinityEnabled": true,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 0,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "siteConfig": {
          "alwaysOn": true,
          "ftpsState": "Disabled"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Web/sites', variables('qnaMakerAppServiceName'))]"
      ],
      "resources": [
        {
          "apiVersion": "2016-08-01",
          "name": "web",
          "type": "sourcecontrols",
          "condition": "[not(empty(parameters('gitRepoUrl')))]",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('botAppName'))]"
          ],
          "properties": {
            "RepoUrl": "[parameters('gitRepoUrl')]",
            "branch": "[parameters('gitBranch')]",
            "IsManualIntegration": true
          }
        }
      ]
    },
    {
        "type": "Microsoft.Web/sites/config",
        "apiVersion": "2018-11-01",
        "name": "[concat(variables('botAppName'), '/appsettings')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('botAppName'))]",
            "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]"
        ],
        "properties": {
            "SITE_ROLE": "bot",
            "TenantId": "[parameters('tenantId')]",
            "AppBaseUri": "[concat('https://', variables('botAppDomain'))]",
            "ScoreThreshold": "0.5",
            "AccessCacheExpiryInDays": "5",
            "SearchIndexingIntervalInMinutes": "10",
            "ApplicationInsightsLogLevel": "Information",
            "MicrosoftAppId": "[parameters('botClientId')]",
            "MicrosoftAppPassword": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'BotClientSecret')).secretUri, ')')]",
            "StorageConnectionString": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'StorageConnectionString')).secretUri, ')')]",
            "APPINSIGHTS_INSTRUMENTATIONKEY": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'AppInsightsInstrumentationKey')).secretUri, ')')]",
            "SearchServiceName": "[variables('azureSearchName')]",
            "SearchServiceAdminApiKey": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'SearchServiceAdminApiKey')).secretUri, ')')]",
            "SearchServiceQueryApiKey": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'SearchServiceQueryApiKey')).secretUri, ')')]",
            "QnAMakerHostUrl": "[concat('https://', reference(resourceId('Microsoft.Web/sites', variables('qnaMakerAppServiceName'))).hostNames[0])]",
            "QnAMakerSubscriptionKey": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'QnAMakerSubscriptionKey')).secretUri, ')')]",
            "QnAMakerApiEndpointUrl": "https://westus.api.cognitive.microsoft.com"
        }
    },
    {
      "apiVersion": "2015-05-01",
      "name": "[variables('botAppInsightsName')]",
      "type": "Microsoft.Insights/components",
      "kind": "web",
      "location": "[parameters('location')]",
      "tags": {
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('botAppName'))]": "Resource",
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('configAppName'))]": "Resource",
        "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('functionAppName'))]": "Resource"
      },
      "properties": {
        "Application_Type": "web",
        "Request_Source": "rest"
      }
    },
    {
      "apiVersion": "2018-07-12",
      "name": "[variables('botName')]",
      "type": "Microsoft.BotService/botServices",
      "location": "global",
      "sku": {
        "name": "F0"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('botName'))]",
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
      ],
      "kind": "sdk",
      "properties": {
        "displayName": "[parameters('appDisplayName')]",
        "description": "[parameters('appDescription')]",
        "iconUrl": "[parameters('appIconUrl')]",
        "msaAppId": "[parameters('botClientId')]",
        "endpoint": "[concat(variables('botAppUrl'), '/api/messages')]",
        "developerAppInsightKey": "[reference(resourceId('Microsoft.Insights/components', variables('botAppInsightsName')), '2015-05-01').InstrumentationKey]"
      },
      "resources": [
        {
          "name": "[concat(variables('botName'), '/MsTeamsChannel')]",
          "type": "Microsoft.BotService/botServices/channels",
          "apiVersion": "2018-07-12",
          "location": "global",
          "sku": {
            "name": "F0"
          },
          "properties": {
            "channelName": "MsTeamsChannel",
            "location": "global",
            "properties": {
              "isEnabled": true
            }
          },
          "dependsOn": [
            "[concat('Microsoft.BotService/botServices/', variables('botName'))]"
          ]
        }
      ]
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "name": "[variables('configAppName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.CognitiveServices/accounts/', variables('qnaMakerAccountName'))]",
        "[resourceId('Microsoft.Insights/components/', variables('botAppInsightsName'))]"
      ],
      "kind": "app",
      "identity": {
          "type": "SystemAssigned"
      },
      "properties": {
        "name": "[variables('configAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "enabled": true,
        "reserved": false,
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": true,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 0,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": true,
        "siteConfig": {
          "alwaysOn": false,
          "ftpsState": "Disabled"
        }
      },
      "resources": [
        {
          "apiVersion": "2016-08-01",
          "name": "web",
          "type": "sourcecontrols",
          "condition": "[not(empty(parameters('gitRepoUrl')))]",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('configAppName'))]"
          ],
          "properties": {
            "RepoUrl": "[parameters('gitRepoUrl')]",
            "branch": "[parameters('gitBranch')]",
            "IsManualIntegration": true
          }
        }
      ]
    },
       {
        "type": "Microsoft.Web/sites/config",
        "apiVersion": "2018-11-01",
        "name": "[concat(variables('configAppName'), '/appsettings')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('configAppName'))]",
            "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]"
        ],
        "properties": {
            "SITE_ROLE": "configuration",
            "ida:AADInstance": "https://login.microsoftonline.com/",
            "ida:ClientId": "[parameters('configAppClientId')]",
            "ida:TenantId": "[parameters('tenantId')]",
            "ida:RedirectUri": "[variables('configAppUrl')]",
            "ida:PostLogoutRedirectUri": "[variables('configAppUrl')]",
            "ValidUpns": "[parameters('configAdminUPNList')]",
            "StorageConnectionString": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'StorageConnectionString')).secretUri, ')')]",
            "APPINSIGHTS_INSTRUMENTATIONKEY": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'AppInsightsInstrumentationKey')).secretUri, ')')]",
            "QnAMakerHostUrl": "[concat('https://', reference(resourceId('Microsoft.Web/sites', variables('qnaMakerAppServiceName'))).hostNames[0])]",
            "QnAMakerSubscriptionKey": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'QnAMakerSubscriptionKey')).secretUri, ')')]",
            "QnAMakerApiEndpointUrl": "[reference(resourceId('Microsoft.CognitiveServices/accounts/', variables('qnaMakerAccountName')), '2017-04-18').endpoint]"
        }
    },
    {
      "type": "Microsoft.CognitiveServices/accounts",
      "kind": "QnAMaker",
      "name": "[variables('qnaMakerAccountName')]",
      "apiVersion": "2017-04-18",
      "location": "[variables('qnaMakerLocation')]",
      "sku": {
        "name": "[variables('qnaMakerSkuValue')]"
      },
      "properties": {
        "apiProperties": {
          "qnaRuntimeEndpoint": "[concat('https://', reference(resourceId('Microsoft.Web/sites', variables('qnaMakerAppServiceName'))).hostNames[0])]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/Sites', variables('qnaMakerAppServiceName'))]",
        "[resourceId('Microsoft.Search/searchServices/', variables('azureSearchName'))]",
        "[resourceId('microsoft.insights/components/', variables('qnaMakerAppInsightsName'))]"
      ]
    },
    {
      "name": "[variables('azureSearchName')]",
      "type": "Microsoft.Search/searchServices",
      "apiVersion": "2015-08-19",
      "location": "[parameters('location')]",
      "tags": {
        "isqnamaker": "true"
      },
      "properties": {
        "replicaCount": 1,
        "partitionCount": 1,
        "hostingMode": "default"
      },
      "sku": {
        "name": "[toLower(variables('azureSearchSkuValue'))]"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "name": "[variables('functionAppName')]",
      "location": "[parameters('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "kind": "functionapp",
      "identity": {
          "type": "SystemAssigned"
      },
      "properties": {
        "name": "[variables('functionAppName')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "hostingEnvironment": "",
        "clientAffinityEnabled": false,
        "siteConfig": {
          "alwaysOn": "[not(variables('isSharedPlan'))]",
          "ftpsState": "Disabled"
        }
      },
      "resources": [
        {
          "type": "sourcecontrols",
          "apiVersion": "2018-11-01",
          "name": "web",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
          ],
          "properties": {
            "RepoUrl": "[parameters('gitRepoUrl')]",
            "branch": "[parameters('gitBranch')]",
            "IsManualIntegration": true
          },
          "condition": "[not(empty(parameters('gitRepoUrl')))]"
        }
      ]
    },
    {
        "type": "Microsoft.Web/sites/config",
        "apiVersion": "2018-11-01",
        "name": "[concat(variables('functionAppName'), '/appsettings')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
            "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]"
        ],
        "properties": {
            "PROJECT": "Source/Microsoft.Teams.Apps.FAQPlusPlus.AzureFunction/Microsoft.Teams.Apps.FAQPlusPlus.AzureFunction.csproj",
            "SITE_ROLE": "function",
            "FUNCTIONS_EXTENSION_VERSION": "~2",
            "FUNCTIONS_WORKER_RUNTIME": "dotnet",
            "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'StorageConnectionString')).secretUri, ')')]",
            "WEBSITE_CONTENTSHARE": "[toLower(variables('functionAppName'))]",
            
            "AzureWebJobsStorage": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'StorageConnectionString')).secretUri, ')')]",
            "AzureWebJobsDashboard": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'StorageConnectionString')).secretUri, ')')]",
            "StorageConnectionString": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'StorageConnectionString')).secretUri, ')')]",
            "SearchServiceName": "[variables('azureSearchName')]",
            "SearchServiceAdminApiKey": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'SearchServiceAdminApiKey')).secretUri, ')')]",
            "SearchServiceQueryApiKey": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'SearchServiceQueryApiKey')).secretUri, ')')]",
            "QnAMakerSubscriptionKey": "[concat('@Microsoft.KeyVault(SecretUri=', reference(resourceId('Microsoft.KeyVault/vaults/secrets', variables('keyVaultName'), 'QnAMakerSubscriptionKey')).secretUri, ')')]",
            "QnAMakerApiUrl": "https://westus.api.cognitive.microsoft.com"
        }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "name": "[variables('qnaMakerAppServiceName')]",
      "location": "[parameters('location')]",
      "properties": {
        "enabled": true,
        "siteConfig": {
          "cors": {
            "allowedOrigins": [
              "*"
            ]
          }
        },
        "name": "[variables('qnaMakerAppServiceName')]",
        "serverFarmId": "[concat('/subscriptions/', subscription().subscriptionId,'/resourcegroups/', resourceGroup().name, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]",
        "hostingEnvironment": ""
      },
      "tags": {
        "isqnamaker": "true",
        "[concat('hidden-related:', '/subscriptions/', subscription().subscriptionId,'/resourcegroups/', resourceGroup().name, '/providers/Microsoft.Web/serverfarms/', variables('hostingPlanName'))]": "empty"
      },
      "dependsOn": [
        "[concat('Microsoft.Web/serverfarms/', variables('hostingPlanName'))]"
      ],
      "resources": [
        {
          "name": "[variables('qnaMakerAppInsightsName')]",
          "type": "microsoft.insights/components",
          "kind": "web",
          "apiVersion": "2015-05-01",
          "location": "[parameters('location')]",
          "tags": {
            "[concat('hidden-link:', resourceId('Microsoft.Web/sites/', variables('qnaMakerAppServiceName')))]": "Resource"
          },
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites/', variables('qnaMakerAppServiceName'))]"
          ],
          "properties": {
            "ApplicationId": "[variables('qnaMakerAppServiceName')]"
          }
        },
        {
          "apiVersion": "2018-11-01",
          "name": "appsettings",
          "type": "config",
          "dependsOn": [
            "[resourceId('Microsoft.Web/Sites', variables('qnaMakerAppServiceName'))]",
            "[resourceId('Microsoft.Search/searchServices/', variables('azureSearchName'))]"
          ],
          "properties": {
            "AzureSearchName": "[variables('azureSearchName')]",
            "AzureSearchAdminKey": "[listAdminKeys(resourceId('Microsoft.Search/searchServices/', variables('azureSearchName')), '2015-08-19').primaryKey]",
            "UserAppInsightsKey": "[reference(resourceId('Microsoft.Insights/components/', variables('qnaMakerAppInsightsName')), '2015-05-01').InstrumentationKey]",
            "UserAppInsightsName": "[variables('qnaMakerAppInsightsName')]",
            "UserAppInsightsAppId": "[reference(resourceId('Microsoft.Insights/components/', variables('qnaMakerAppInsightsName')), '2015-05-01').AppId]",
            "PrimaryEndpointKey": "[concat(variables('qnaMakerAppServiceName'), '-PrimaryEndpointKey')]",
            "SecondaryEndpointKey": "[concat(variables('qnaMakerAppServiceName'), '-SecondaryEndpointKey')]",
            "DefaultAnswer": "No good match found in KB.",
            "QNAMAKER_EXTENSION_VERSION": "latest"
          }
        }
      ]
    },
    {
      "apiVersion": "2019-09-01",
      "type": "Microsoft.KeyVault/vaults",
      "name": "[variables('keyVaultName')]",
      "location": "[resourceGroup().location]",
      "properties": {
          "tenantId": "[subscription().tenantId]",
          "sku": {
              "name": "standard",
              "family": "A"
          },
          "accessPolicies": [
              {
                  "tenantId": "[reference(resourceId('Microsoft.Web/sites', variables('botAppName')),'2020-06-01', 'Full').identity.tenantId]",
                  "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('botAppName')),'2020-06-01', 'Full').identity.principalId]",
                  "permissions": {
                      "secrets": [ "get" ]
                  }
              },
              {
                  "tenantId": "[reference(resourceId('Microsoft.Web/sites', variables('configAppName')),'2020-06-01', 'Full').identity.tenantId]",
                  "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('configAppName')),'2020-06-01', 'Full').identity.principalId]",
                  "permissions": {
                      "secrets": [ "get" ]
                  }
              },
              {
                  "tenantId": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')),'2020-06-01', 'Full').identity.tenantId]",
                  "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName')),'2020-06-01', 'Full').identity.principalId]",
                  "permissions": {
                      "secrets": [ "get" ]
                  }
              }
          ]
      },
      "resources": [
          {
              "apiVersion": "2019-09-01",
              "type": "secrets",
              "name": "StorageConnectionString",
              "dependsOn": [
                  "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                  "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]"
              ],
              "properties": {
                  "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')),'2015-05-01-preview').key1)]"
              }
          },
          {
              "apiVersion": "2019-09-01",
              "type": "secrets",
              "name": "BotClientSecret",
              "dependsOn": [
                  "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]"
              ],
              "properties": {
                  "value": "[parameters('botClientSecret')]"
              }
          },
          {
              "apiVersion": "2019-09-01",
              "type": "secrets",
              "name": "AppInsightsInstrumentationKey",
              "dependsOn": [
                  "[resourceId('Microsoft.Insights/components/', variables('botAppInsightsName'))]",
                  "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]"
              ],
              "properties": {
                  "value": "[reference(resourceId('Microsoft.Insights/components/', variables('botAppInsightsName')), '2015-05-01').InstrumentationKey]"
              }
          },
          {
              "apiVersion": "2019-09-01",
              "type": "secrets",
              "name": "SearchServiceAdminApiKey",
              "dependsOn": [
                  "[resourceId('Microsoft.Search/searchServices/', variables('azureSearchName'))]",
                  "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]"
              ],
              "properties": {
                  "value": "[listAdminKeys(resourceId('Microsoft.Search/searchServices/', variables('azureSearchName')), '2015-08-19').primaryKey]"
              }
          },
          {
              "apiVersion": "2019-09-01",
              "type": "secrets",
              "name": "SearchServiceQueryApiKey",
              "dependsOn": [
                  "[resourceId('Microsoft.Search/searchServices/', variables('azureSearchName'))]",
                  "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]"
              ],
              "properties": {
                  "value": "[listQueryKeys(resourceId('Microsoft.Search/searchServices/', variables('azureSearchName')), '2015-08-19').value[0].key]"
              }
          },
          {
              "apiVersion": "2019-09-01",
              "type": "secrets",
              "name": "QnAMakerSubscriptionKey",
              "dependsOn": [
                  "[resourceId('Microsoft.CognitiveServices/accounts/', variables('qnaMakerAccountName'))]",
                  "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]"
              ],
              "properties": {
                  "value": "[listKeys(resourceId('Microsoft.CognitiveServices/accounts/', variables('qnaMakerAccountName')), '2017-04-18').key1]"
              }
          }
      ]
    }
  ],
  "outputs": {
    "botId": {
      "type": "string",
      "value": "[parameters('botClientId')]"
    },
    "appDomain": {
      "type": "string",
      "value": "[variables('botAppDomain')]"
    },
    "configurationAppUrl": {
      "type": "string",
      "value": "[variables('configAppUrl')]"
    }
  }
}